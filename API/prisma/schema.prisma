generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
  DOCTOR
}

enum Analyze_Jornul_Type {
  ACTIV
  RETRO
}

model User {
  id             Int                 @id @default(autoincrement())
  email          String              @unique
  password       String
  role           Role                @default(CLIENT)
  createdAt      DateTime            @default(now())
  personalData   Personal_Data?
  files          FileS3[]
  articles       Article[]           
  medicamentatie Medicamentatie[]   @relation("UserMedicamentatie")
  diagnoses      Medical_Diagnosis[]
}

model Personal_Data {
  id          Int                      @id @default(autoincrement())
  cnp         String                   @unique @db.VarChar(13)
  firstName   String                   @db.VarChar(40)
  lastName    String                   @db.VarChar(40)
  address     String                   @db.VarChar(200)
  phoneNumber String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @default(now())
  userId      Int                      @unique
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  details     Personal_Data_Details?   @relation("PersonalDataToDetails")
}

model Personal_Data_Details {
  id             Int          @id @default(autoincrement())
  fumator        Boolean
  sarcinaActiva  Boolean
  diabet         Boolean
  personalDataId Int          @unique
  personalData   Personal_Data @relation(fields: [personalDataId], references: [id], onDelete: Cascade, name: "PersonalDataToDetails")
}


model Article {  
  id           Int      @id @default(autoincrement())  
  name         String   @db.VarChar(50) @unique
  description  String   @db.Text
  content      String   @db.Text

  imageId      Int?     
  image        FileS3?  @relation(fields: [imageId], references: [id])

  uploadedById Int
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
}

model FileS3 {
  id           Int       @id @default(autoincrement())
  name         String    
  uploaderId   Int       
  uploadedAt   DateTime  @default(now()) 
  isDeleted    Boolean   @default(false) 
  description  String?   
  mimeType     String

  uploader     User      @relation(fields: [uploaderId], references: [id])
  articles     Article[] // one-to-many relation: one image â†’ many articles
}

model Medicamente {
  id            Int            @id @default(autoincrement())
  name          String         @db.Text @unique
  description   String         @db.Text
  medicamentatie Medicamentatie[] @relation("MedicamenteMedicamentatie")
}

model Medicamentatie {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(64)
  startDate     DateTime     @db.Timestamp()
  endDate       DateTime     @db.Timestamp()    
  medicamentId  Int
  medicament    Medicamente   @relation("MedicamenteMedicamentatie", fields: [medicamentId], references: [id])
  quantity      Int 
  userId        Int
  user          User         @relation("UserMedicamentatie", fields: [userId], references: [id], onDelete: Cascade) 
  createdAt     DateTime     @default(now()) 
  updatedAt     DateTime     @updatedAt      

  @@unique([name, userId]) 

}


model Medical_Category {
  id          Int                  @id @default(autoincrement())
  name        String               @db.VarChar(100)
  description String               @db.Text
  diseases    Medical_Disease[]
  parameters  Medical_Parameter[]
}

model Medical_Disease {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(100)
  description String           @db.Text
  categoryId  Int
  category    Medical_Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  diagnosis   Medical_Diagnosis?
}

model Medical_Diagnosis {
  id               Int              @id @default(autoincrement())
  userId           Int
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  medicalDiseaseId Int              @unique
  disease          Medical_Disease  @relation(fields: [medicalDiseaseId], references: [id], onDelete: Cascade)

  startDate        DateTime
  endDate          DateTime?
  isChronic        Boolean
  diagnosisMethod  String           @db.VarChar(100)
  confirmed        Boolean
  confirmedDate    DateTime
}

model Medical_Parameter {
  id                 Int              @id @default(autoincrement())
  name               String           @db.VarChar(100)
  unit               String           @db.VarChar(20)
  type               String           @db.VarChar(50)
  min_val            Float?
  max_val            Float?
  medicalCategoryId  Int
  category           Medical_Category @relation(fields: [medicalCategoryId], references: [id], onDelete: Cascade)
}




